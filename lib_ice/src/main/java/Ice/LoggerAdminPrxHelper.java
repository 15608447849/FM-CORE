// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RemoteLogger.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Ice;

/**
 * Provides type-specific helper functions.
 **/
public final class LoggerAdminPrxHelper extends Ice.ObjectPrxHelperBase implements LoggerAdminPrx
{
    private static final String __attachRemoteLogger_name = "attachRemoteLogger";

    public void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax)
        throws RemoteLoggerAlreadyAttachedException
    {
        attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, null, false);
    }

    public void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> __ctx)
        throws RemoteLoggerAlreadyAttachedException
    {
        attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, __ctx, true);
    }

    private void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RemoteLoggerAlreadyAttachedException
    {
        __checkTwowayOnly(__attachRemoteLogger_name);
        end_attachRemoteLogger(begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, null, false, false, null);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> __ctx)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, Ice.Callback __cb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, Callback_LoggerAdmin_attachRemoteLogger __cb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> __ctx, Callback_LoggerAdmin_attachRemoteLogger __cb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, 
                                                    LogMessageType[] messageTypes, 
                                                    String[] traceCategories, 
                                                    int messageMax, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, 
                                                    LogMessageType[] messageTypes, 
                                                    String[] traceCategories, 
                                                    int messageMax, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, 
                                                    LogMessageType[] messageTypes, 
                                                    String[] traceCategories, 
                                                    int messageMax, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, 
                                                    LogMessageType[] messageTypes, 
                                                    String[] traceCategories, 
                                                    int messageMax, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, 
                                                     LogMessageType[] messageTypes, 
                                                     String[] traceCategories, 
                                                     int messageMax, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    LoggerAdminPrxHelper.__attachRemoteLogger_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_attachRemoteLogger(RemoteLoggerPrx prx, 
                                                     LogMessageType[] messageTypes, 
                                                     String[] traceCategories, 
                                                     int messageMax, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__attachRemoteLogger_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__attachRemoteLogger_name, __cb);
        try
        {
            __result.prepare(__attachRemoteLogger_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RemoteLoggerPrxHelper.__write(__os, prx);
            LogMessageTypeSeqHelper.write(__os, messageTypes);
            StringSeqHelper.write(__os, traceCategories);
            __os.writeInt(messageMax);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_attachRemoteLogger(Ice.AsyncResult __iresult)
        throws RemoteLoggerAlreadyAttachedException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __attachRemoteLogger_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RemoteLoggerAlreadyAttachedException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __attachRemoteLogger_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Ice.LoggerAdminPrx __proxy = (Ice.LoggerAdminPrx)__result.getProxy();
        try
        {
            __proxy.end_attachRemoteLogger(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __detachRemoteLogger_name = "detachRemoteLogger";

    public boolean detachRemoteLogger(RemoteLoggerPrx prx)
    {
        return detachRemoteLogger(prx, null, false);
    }

    public boolean detachRemoteLogger(RemoteLoggerPrx prx, java.util.Map<String, String> __ctx)
    {
        return detachRemoteLogger(prx, __ctx, true);
    }

    private boolean detachRemoteLogger(RemoteLoggerPrx prx, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__detachRemoteLogger_name);
        return end_detachRemoteLogger(begin_detachRemoteLogger(prx, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx)
    {
        return begin_detachRemoteLogger(prx, null, false, false, null);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, java.util.Map<String, String> __ctx)
    {
        return begin_detachRemoteLogger(prx, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, Ice.Callback __cb)
    {
        return begin_detachRemoteLogger(prx, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_detachRemoteLogger(prx, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, Callback_LoggerAdmin_detachRemoteLogger __cb)
    {
        return begin_detachRemoteLogger(prx, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, java.util.Map<String, String> __ctx, Callback_LoggerAdmin_detachRemoteLogger __cb)
    {
        return begin_detachRemoteLogger(prx, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_detachRemoteLogger(prx, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_detachRemoteLogger(prx, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_detachRemoteLogger(prx, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_detachRemoteLogger(prx, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_BoolCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_detachRemoteLogger(prx, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    LoggerAdminPrxHelper.__detachRemoteLogger_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_detachRemoteLogger(RemoteLoggerPrx prx, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__detachRemoteLogger_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__detachRemoteLogger_name, __cb);
        try
        {
            __result.prepare(__detachRemoteLogger_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RemoteLoggerPrxHelper.__write(__os, prx);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_detachRemoteLogger(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __detachRemoteLogger_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __detachRemoteLogger_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        Ice.LoggerAdminPrx __proxy = (Ice.LoggerAdminPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_detachRemoteLogger(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getLog_name = "getLog";

    public LogMessage[] getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, Ice.StringHolder prefix)
    {
        return getLog(messageTypes, traceCategories, messageMax, prefix, null, false);
    }

    public LogMessage[] getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, Ice.StringHolder prefix, java.util.Map<String, String> __ctx)
    {
        return getLog(messageTypes, traceCategories, messageMax, prefix, __ctx, true);
    }

    private LogMessage[] getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, Ice.StringHolder prefix, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getLog_name);
        return end_getLog(prefix, begin_getLog(messageTypes, traceCategories, messageMax, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, null, false, false, null);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> __ctx)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, Ice.Callback __cb)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, Callback_LoggerAdmin_getLog __cb)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> __ctx, Callback_LoggerAdmin_getLog __cb)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, 
                                        String[] traceCategories, 
                                        int messageMax, 
                                        FunctionalCallback_LoggerAdmin_getLog_Response __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, 
                                        String[] traceCategories, 
                                        int messageMax, 
                                        FunctionalCallback_LoggerAdmin_getLog_Response __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, 
                                        String[] traceCategories, 
                                        int messageMax, 
                                        java.util.Map<String, String> __ctx, 
                                        FunctionalCallback_LoggerAdmin_getLog_Response __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, 
                                        String[] traceCategories, 
                                        int messageMax, 
                                        java.util.Map<String, String> __ctx, 
                                        FunctionalCallback_LoggerAdmin_getLog_Response __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLog(messageTypes, traceCategories, messageMax, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, 
                                         String[] traceCategories, 
                                         int messageMax, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         FunctionalCallback_LoggerAdmin_getLog_Response __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements Ice._Callback_LoggerAdmin_getLog
        {
            public CB(FunctionalCallback_LoggerAdmin_getLog_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(LogMessage[] __ret, String prefix)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, prefix);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                LoggerAdminPrxHelper.__getLog_completed(this, __result);
            }

            private final FunctionalCallback_LoggerAdmin_getLog_Response __responseCb;
        }
        return begin_getLog(messageTypes, traceCategories, messageMax, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getLog(LogMessageType[] messageTypes, 
                                         String[] traceCategories, 
                                         int messageMax, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLog_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getLog_name, __cb);
        try
        {
            __result.prepare(__getLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            LogMessageTypeSeqHelper.write(__os, messageTypes);
            StringSeqHelper.write(__os, traceCategories);
            __os.writeInt(messageMax);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public LogMessage[] end_getLog(Ice.StringHolder prefix, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getLog_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            prefix.value = __is.readString();
            LogMessage[] __ret;
            __ret = LogMessageSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getLog_completed(Ice._Callback_LoggerAdmin_getLog __cb, Ice.AsyncResult __result)
    {
        Ice.LoggerAdminPrx __proxy = (Ice.LoggerAdminPrx)__result.getProxy();
        LogMessage[] __ret = null;
        Ice.StringHolder prefix = new Ice.StringHolder();
        try
        {
            __ret = __proxy.end_getLog(prefix, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, prefix.value);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LoggerAdminPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), LoggerAdminPrx.class, LoggerAdminPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LoggerAdminPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), LoggerAdminPrx.class, LoggerAdminPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LoggerAdminPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), LoggerAdminPrx.class, LoggerAdminPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LoggerAdminPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), LoggerAdminPrx.class, LoggerAdminPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static LoggerAdminPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, LoggerAdminPrx.class, LoggerAdminPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static LoggerAdminPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, LoggerAdminPrx.class, LoggerAdminPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::LoggerAdmin",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, LoggerAdminPrx v)
    {
        __os.writeProxy(v);
    }

    public static LoggerAdminPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LoggerAdminPrxHelper result = new LoggerAdminPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
