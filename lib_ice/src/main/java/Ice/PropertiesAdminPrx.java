// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `PropertiesAdmin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Ice;

/**
 * The PropertiesAdmin interface provides remote access to the properties
 * of a communicator.
 *
 **/
public interface PropertiesAdminPrx extends Ice.ObjectPrx
{
    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     *
     * @param key The property key.
     *
     * @return The property value.
     *
     **/
    public String getProperty(String key);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     *
     * @param key The property key.
     *
     * @param __ctx The Context map to send with the invocation.
     * @return The property value.
     *
     **/
    public String getProperty(String key, java.util.Map<String, String> __ctx);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, java.util.Map<String, String> __ctx);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, Ice.Callback __cb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, Callback_PropertiesAdmin_getProperty __cb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, java.util.Map<String, String> __ctx, Callback_PropertiesAdmin_getProperty __cb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param __result The asynchronous result object.
     * @return The property value.
     * 
     **/
    public String end_getProperty(Ice.AsyncResult __result);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     *
     * @param prefix The prefix to search for (empty string if none).
     * @return The matching property set.
     *
     **/
    public java.util.Map<java.lang.String, java.lang.String> getPropertiesForPrefix(String prefix);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     *
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @return The matching property set.
     *
     **/
    public java.util.Map<java.lang.String, java.lang.String> getPropertiesForPrefix(String prefix, java.util.Map<String, String> __ctx);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, java.util.Map<String, String> __ctx);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, Ice.Callback __cb);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, Callback_PropertiesAdmin_getPropertiesForPrefix __cb);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, java.util.Map<String, String> __ctx, Callback_PropertiesAdmin_getPropertiesForPrefix __cb);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, 
                                                        IceInternal.Functional_GenericCallback1<java.util.Map<java.lang.String, java.lang.String>> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, 
                                                        IceInternal.Functional_GenericCallback1<java.util.Map<java.lang.String, java.lang.String>> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<java.util.Map<java.lang.String, java.lang.String>> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<java.util.Map<java.lang.String, java.lang.String>> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If
     * <em>prefix</em> is an empty string then all properties are returned.
     * 
     * @param __result The asynchronous result object.
     * @return The matching property set.
     * 
     **/
    public java.util.Map<java.lang.String, java.lang.String> end_getPropertiesForPrefix(Ice.AsyncResult __result);

    /**
     * Update the communicator's properties with the given property set.
     *
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     *
     **/
    public void setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties);

    /**
     * Update the communicator's properties with the given property set.
     *
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     *
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, java.util.Map<String, String> __ctx);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, java.util.Map<String, String> __ctx);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, Ice.Callback __cb);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, Callback_PropertiesAdmin_setProperties __cb);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, java.util.Map<String, String> __ctx, Callback_PropertiesAdmin_setProperties __cb);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param newProperties Properties to be added, changed, or removed.
     * If an entry in <em>newProperties</em> matches the name of an existing property,
     * that property's value is replaced with the new value. If the new value
     * is an empty string, the property is removed. Any existing properties
     * that are not modified or removed by the entries in newProperties are
     * retained with their original values.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Update the communicator's properties with the given property set.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_setProperties(Ice.AsyncResult __result);
}
