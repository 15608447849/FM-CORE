// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Ice;

/**
 * Provides type-specific helper functions.
 **/
public final class LocatorPrxHelper extends Ice.ObjectPrxHelperBase implements LocatorPrx
{
    private static final String __findAdapterById_name = "findAdapterById";

    public Ice.ObjectPrx findAdapterById(String id)
        throws AdapterNotFoundException
    {
        return findAdapterById(id, null, false);
    }

    public Ice.ObjectPrx findAdapterById(String id, java.util.Map<String, String> __ctx)
        throws AdapterNotFoundException
    {
        return findAdapterById(id, __ctx, true);
    }

    private Ice.ObjectPrx findAdapterById(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AdapterNotFoundException
    {
        __checkTwowayOnly(__findAdapterById_name);
        return end_findAdapterById(begin_findAdapterById(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_findAdapterById(String id)
    {
        return begin_findAdapterById(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, java.util.Map<String, String> __ctx)
    {
        return begin_findAdapterById(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, Ice.Callback __cb)
    {
        return begin_findAdapterById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findAdapterById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, Callback_Locator_findAdapterById __cb)
    {
        return begin_findAdapterById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, java.util.Map<String, String> __ctx, Callback_Locator_findAdapterById __cb)
    {
        return begin_findAdapterById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, 
                                                 IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findAdapterById(id, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, 
                                                 IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findAdapterById(id, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findAdapterById(id, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findAdapterById(String id, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findAdapterById(id, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_findAdapterById(String id, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findAdapterById(id, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1UE<Ice.ObjectPrx>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 LocatorPrxHelper.__findAdapterById_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_findAdapterById(String id, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findAdapterById_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__findAdapterById_name, __cb);
        try
        {
            __result.prepare(__findAdapterById_name, Ice.OperationMode.Nonmutating, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Ice.ObjectPrx end_findAdapterById(Ice.AsyncResult __iresult)
        throws AdapterNotFoundException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __findAdapterById_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(AdapterNotFoundException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Ice.ObjectPrx __ret;
            __ret = __is.readProxy();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __findAdapterById_completed(Ice.TwowayCallbackArg1UE<Ice.ObjectPrx> __cb, Ice.AsyncResult __result)
    {
        Ice.LocatorPrx __proxy = (Ice.LocatorPrx)__result.getProxy();
        Ice.ObjectPrx __ret = null;
        try
        {
            __ret = __proxy.end_findAdapterById(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __findObjectById_name = "findObjectById";

    public Ice.ObjectPrx findObjectById(Identity id)
        throws ObjectNotFoundException
    {
        return findObjectById(id, null, false);
    }

    public Ice.ObjectPrx findObjectById(Identity id, java.util.Map<String, String> __ctx)
        throws ObjectNotFoundException
    {
        return findObjectById(id, __ctx, true);
    }

    private Ice.ObjectPrx findObjectById(Identity id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ObjectNotFoundException
    {
        __checkTwowayOnly(__findObjectById_name);
        return end_findObjectById(begin_findObjectById(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_findObjectById(Identity id)
    {
        return begin_findObjectById(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, java.util.Map<String, String> __ctx)
    {
        return begin_findObjectById(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, Ice.Callback __cb)
    {
        return begin_findObjectById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findObjectById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, Callback_Locator_findObjectById __cb)
    {
        return begin_findObjectById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, java.util.Map<String, String> __ctx, Callback_Locator_findObjectById __cb)
    {
        return begin_findObjectById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, 
                                                IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findObjectById(id, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, 
                                                IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findObjectById(id, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findObjectById(id, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findObjectById(Identity id, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findObjectById(id, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_findObjectById(Identity id, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<Ice.ObjectPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findObjectById(id, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1UE<Ice.ObjectPrx>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                LocatorPrxHelper.__findObjectById_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_findObjectById(Identity id, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findObjectById_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__findObjectById_name, __cb);
        try
        {
            __result.prepare(__findObjectById_name, Ice.OperationMode.Nonmutating, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Identity.__write(__os, id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Ice.ObjectPrx end_findObjectById(Ice.AsyncResult __iresult)
        throws ObjectNotFoundException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __findObjectById_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(ObjectNotFoundException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Ice.ObjectPrx __ret;
            __ret = __is.readProxy();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __findObjectById_completed(Ice.TwowayCallbackArg1UE<Ice.ObjectPrx> __cb, Ice.AsyncResult __result)
    {
        Ice.LocatorPrx __proxy = (Ice.LocatorPrx)__result.getProxy();
        Ice.ObjectPrx __ret = null;
        try
        {
            __ret = __proxy.end_findObjectById(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getRegistry_name = "getRegistry";

    public LocatorRegistryPrx getRegistry()
    {
        return getRegistry(null, false);
    }

    public LocatorRegistryPrx getRegistry(java.util.Map<String, String> __ctx)
    {
        return getRegistry(__ctx, true);
    }

    private LocatorRegistryPrx getRegistry(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getRegistry_name);
        return end_getRegistry(begin_getRegistry(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getRegistry()
    {
        return begin_getRegistry(null, false, false, null);
    }

    public Ice.AsyncResult begin_getRegistry(java.util.Map<String, String> __ctx)
    {
        return begin_getRegistry(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getRegistry(Ice.Callback __cb)
    {
        return begin_getRegistry(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getRegistry(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRegistry(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getRegistry(Callback_Locator_getRegistry __cb)
    {
        return begin_getRegistry(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getRegistry(java.util.Map<String, String> __ctx, Callback_Locator_getRegistry __cb)
    {
        return begin_getRegistry(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getRegistry(IceInternal.Functional_GenericCallback1<LocatorRegistryPrx> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getRegistry(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getRegistry(IceInternal.Functional_GenericCallback1<LocatorRegistryPrx> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getRegistry(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getRegistry(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<LocatorRegistryPrx> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getRegistry(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getRegistry(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<LocatorRegistryPrx> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getRegistry(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getRegistry(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<LocatorRegistryPrx> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getRegistry(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<Ice.LocatorRegistryPrx>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             LocatorPrxHelper.__getRegistry_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_getRegistry(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRegistry_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getRegistry_name, __cb);
        try
        {
            __result.prepare(__getRegistry_name, Ice.OperationMode.Nonmutating, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public LocatorRegistryPrx end_getRegistry(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getRegistry_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            LocatorRegistryPrx __ret;
            __ret = LocatorRegistryPrxHelper.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getRegistry_completed(Ice.TwowayCallbackArg1<LocatorRegistryPrx> __cb, Ice.AsyncResult __result)
    {
        Ice.LocatorPrx __proxy = (Ice.LocatorPrx)__result.getProxy();
        LocatorRegistryPrx __ret = null;
        try
        {
            __ret = __proxy.end_getRegistry(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LocatorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), LocatorPrx.class, LocatorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LocatorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), LocatorPrx.class, LocatorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LocatorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), LocatorPrx.class, LocatorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LocatorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), LocatorPrx.class, LocatorPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static LocatorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, LocatorPrx.class, LocatorPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static LocatorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, LocatorPrx.class, LocatorPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Locator",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, LocatorPrx v)
    {
        __os.writeProxy(v);
    }

    public static LocatorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LocatorPrxHelper result = new LocatorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
