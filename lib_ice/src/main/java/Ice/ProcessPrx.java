// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Process.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Ice;

/**
 * An administrative interface for process management. Managed servers must
 * implement this interface.
 *
 * <p class="Note">A servant implementing this interface is a potential target
 * for denial-of-service attacks, therefore proper security precautions
 * should be taken. For example, the servant can use a UUID to make its
 * identity harder to guess, and be registered in an object adapter with
 * a secured endpoint.
 *
 **/
public interface ProcessPrx extends Ice.ObjectPrx
{
    /**
     * Initiate a graceful shut-down.
     *
     * @see Communicator#shutdown
     *
     **/
    public void shutdown();

    /**
     * Initiate a graceful shut-down.
     *
     * @see Communicator#shutdown
     *
     * @param __ctx The Context map to send with the invocation.
     **/
    public void shutdown(java.util.Map<String, String> __ctx);

    /**
     * Initiate a graceful shut-down.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown();

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(Ice.Callback __cb);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(Callback_Process_shutdown __cb);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, Callback_Process_shutdown __cb);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Initiate a graceful shut-down.
     * 
     * @param __result The asynchronous result object.
     * @see Communicator#shutdown
     * 
     **/
    public void end_shutdown(Ice.AsyncResult __result);

    /**
     * Write a message on the process' stdout or stderr.
     *
     * @param message The message.
     *
     * @param fd 1 for stdout, 2 for stderr.
     *
     **/
    public void writeMessage(String message, int fd);

    /**
     * Write a message on the process' stdout or stderr.
     *
     * @param message The message.
     *
     * @param fd 1 for stdout, 2 for stderr.
     *
     * @param __ctx The Context map to send with the invocation.
     **/
    public void writeMessage(String message, int fd, java.util.Map<String, String> __ctx);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, int fd);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, int fd, java.util.Map<String, String> __ctx);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, int fd, Ice.Callback __cb);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, int fd, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, int fd, Callback_Process_writeMessage __cb);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, int fd, java.util.Map<String, String> __ctx, Callback_Process_writeMessage __cb);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, 
                                              int fd, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, 
                                              int fd, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, 
                                              int fd, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param message The message.
     * 
     * @param fd 1 for stdout, 2 for stderr.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_writeMessage(String message, 
                                              int fd, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb);

    /**
     * Write a message on the process' stdout or stderr.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_writeMessage(Ice.AsyncResult __result);
}
