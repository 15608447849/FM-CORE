// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Ice;

/**
 * Provides type-specific helper functions.
 **/
public final class LocatorRegistryPrxHelper extends Ice.ObjectPrxHelperBase implements LocatorRegistryPrx
{
    private static final String __setAdapterDirectProxy_name = "setAdapterDirectProxy";

    public void setAdapterDirectProxy(String id, Ice.ObjectPrx proxy)
        throws AdapterAlreadyActiveException,
               AdapterNotFoundException
    {
        setAdapterDirectProxy(id, proxy, null, false);
    }

    public void setAdapterDirectProxy(String id, Ice.ObjectPrx proxy, java.util.Map<String, String> __ctx)
        throws AdapterAlreadyActiveException,
               AdapterNotFoundException
    {
        setAdapterDirectProxy(id, proxy, __ctx, true);
    }

    private void setAdapterDirectProxy(String id, Ice.ObjectPrx proxy, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AdapterAlreadyActiveException,
               AdapterNotFoundException
    {
        __checkTwowayOnly(__setAdapterDirectProxy_name);
        end_setAdapterDirectProxy(begin_setAdapterDirectProxy(id, proxy, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, Ice.ObjectPrx proxy)
    {
        return begin_setAdapterDirectProxy(id, proxy, null, false, false, null);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, Ice.ObjectPrx proxy, java.util.Map<String, String> __ctx)
    {
        return begin_setAdapterDirectProxy(id, proxy, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, Ice.ObjectPrx proxy, Ice.Callback __cb)
    {
        return begin_setAdapterDirectProxy(id, proxy, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, Ice.ObjectPrx proxy, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setAdapterDirectProxy(id, proxy, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, Ice.ObjectPrx proxy, Callback_LocatorRegistry_setAdapterDirectProxy __cb)
    {
        return begin_setAdapterDirectProxy(id, proxy, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, Ice.ObjectPrx proxy, java.util.Map<String, String> __ctx, Callback_LocatorRegistry_setAdapterDirectProxy __cb)
    {
        return begin_setAdapterDirectProxy(id, proxy, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, 
                                                       Ice.ObjectPrx proxy, 
                                                       IceInternal.Functional_VoidCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setAdapterDirectProxy(id, proxy, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, 
                                                       Ice.ObjectPrx proxy, 
                                                       IceInternal.Functional_VoidCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setAdapterDirectProxy(id, proxy, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, 
                                                       Ice.ObjectPrx proxy, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_VoidCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setAdapterDirectProxy(id, proxy, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setAdapterDirectProxy(String id, 
                                                       Ice.ObjectPrx proxy, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_VoidCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setAdapterDirectProxy(id, proxy, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_setAdapterDirectProxy(String id, 
                                                        Ice.ObjectPrx proxy, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_VoidCallback __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setAdapterDirectProxy(id, proxy, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       LocatorRegistryPrxHelper.__setAdapterDirectProxy_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_setAdapterDirectProxy(String id, 
                                                        Ice.ObjectPrx proxy, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setAdapterDirectProxy_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__setAdapterDirectProxy_name, __cb);
        try
        {
            __result.prepare(__setAdapterDirectProxy_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeProxy(proxy);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_setAdapterDirectProxy(Ice.AsyncResult __iresult)
        throws AdapterAlreadyActiveException,
               AdapterNotFoundException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __setAdapterDirectProxy_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(AdapterAlreadyActiveException __ex)
                {
                    throw __ex;
                }
                catch(AdapterNotFoundException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __setAdapterDirectProxy_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Ice.LocatorRegistryPrx __proxy = (Ice.LocatorRegistryPrx)__result.getProxy();
        try
        {
            __proxy.end_setAdapterDirectProxy(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __setReplicatedAdapterDirectProxy_name = "setReplicatedAdapterDirectProxy";

    public void setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p)
        throws AdapterAlreadyActiveException,
               AdapterNotFoundException,
               InvalidReplicaGroupIdException
    {
        setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, null, false);
    }

    public void setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p, java.util.Map<String, String> __ctx)
        throws AdapterAlreadyActiveException,
               AdapterNotFoundException,
               InvalidReplicaGroupIdException
    {
        setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, __ctx, true);
    }

    private void setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AdapterAlreadyActiveException,
               AdapterNotFoundException,
               InvalidReplicaGroupIdException
    {
        __checkTwowayOnly(__setReplicatedAdapterDirectProxy_name);
        end_setReplicatedAdapterDirectProxy(begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, null, false, false, null);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p, java.util.Map<String, String> __ctx)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p, Ice.Callback __cb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p, Callback_LocatorRegistry_setReplicatedAdapterDirectProxy __cb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, Ice.ObjectPrx p, java.util.Map<String, String> __ctx, Callback_LocatorRegistry_setReplicatedAdapterDirectProxy __cb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, 
                                                                 String replicaGroupId, 
                                                                 Ice.ObjectPrx p, 
                                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, 
                                                                 String replicaGroupId, 
                                                                 Ice.ObjectPrx p, 
                                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, 
                                                                 String replicaGroupId, 
                                                                 Ice.ObjectPrx p, 
                                                                 java.util.Map<String, String> __ctx, 
                                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, 
                                                                 String replicaGroupId, 
                                                                 Ice.ObjectPrx p, 
                                                                 java.util.Map<String, String> __ctx, 
                                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, 
                                                                  String replicaGroupId, 
                                                                  Ice.ObjectPrx p, 
                                                                  java.util.Map<String, String> __ctx, 
                                                                  boolean __explicitCtx, 
                                                                  boolean __synchronous, 
                                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, __ctx, __explicitCtx, __synchronous, 
                                                     new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                                         {
                                                             public final void __completed(Ice.AsyncResult __result)
                                                             {
                                                                 LocatorRegistryPrxHelper.__setReplicatedAdapterDirectProxy_completed(this, __result);
                                                             }
                                                         });
    }

    private Ice.AsyncResult begin_setReplicatedAdapterDirectProxy(String adapterId, 
                                                                  String replicaGroupId, 
                                                                  Ice.ObjectPrx p, 
                                                                  java.util.Map<String, String> __ctx, 
                                                                  boolean __explicitCtx, 
                                                                  boolean __synchronous, 
                                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setReplicatedAdapterDirectProxy_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__setReplicatedAdapterDirectProxy_name, __cb);
        try
        {
            __result.prepare(__setReplicatedAdapterDirectProxy_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(adapterId);
            __os.writeString(replicaGroupId);
            __os.writeProxy(p);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_setReplicatedAdapterDirectProxy(Ice.AsyncResult __iresult)
        throws AdapterAlreadyActiveException,
               AdapterNotFoundException,
               InvalidReplicaGroupIdException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __setReplicatedAdapterDirectProxy_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(AdapterAlreadyActiveException __ex)
                {
                    throw __ex;
                }
                catch(AdapterNotFoundException __ex)
                {
                    throw __ex;
                }
                catch(InvalidReplicaGroupIdException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __setReplicatedAdapterDirectProxy_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Ice.LocatorRegistryPrx __proxy = (Ice.LocatorRegistryPrx)__result.getProxy();
        try
        {
            __proxy.end_setReplicatedAdapterDirectProxy(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __setServerProcessProxy_name = "setServerProcessProxy";

    public void setServerProcessProxy(String id, ProcessPrx proxy)
        throws ServerNotFoundException
    {
        setServerProcessProxy(id, proxy, null, false);
    }

    public void setServerProcessProxy(String id, ProcessPrx proxy, java.util.Map<String, String> __ctx)
        throws ServerNotFoundException
    {
        setServerProcessProxy(id, proxy, __ctx, true);
    }

    private void setServerProcessProxy(String id, ProcessPrx proxy, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ServerNotFoundException
    {
        __checkTwowayOnly(__setServerProcessProxy_name);
        end_setServerProcessProxy(begin_setServerProcessProxy(id, proxy, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, ProcessPrx proxy)
    {
        return begin_setServerProcessProxy(id, proxy, null, false, false, null);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, ProcessPrx proxy, java.util.Map<String, String> __ctx)
    {
        return begin_setServerProcessProxy(id, proxy, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, ProcessPrx proxy, Ice.Callback __cb)
    {
        return begin_setServerProcessProxy(id, proxy, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, ProcessPrx proxy, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setServerProcessProxy(id, proxy, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, ProcessPrx proxy, Callback_LocatorRegistry_setServerProcessProxy __cb)
    {
        return begin_setServerProcessProxy(id, proxy, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, ProcessPrx proxy, java.util.Map<String, String> __ctx, Callback_LocatorRegistry_setServerProcessProxy __cb)
    {
        return begin_setServerProcessProxy(id, proxy, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, 
                                                       ProcessPrx proxy, 
                                                       IceInternal.Functional_VoidCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setServerProcessProxy(id, proxy, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, 
                                                       ProcessPrx proxy, 
                                                       IceInternal.Functional_VoidCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setServerProcessProxy(id, proxy, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, 
                                                       ProcessPrx proxy, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_VoidCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setServerProcessProxy(id, proxy, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setServerProcessProxy(String id, 
                                                       ProcessPrx proxy, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_VoidCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setServerProcessProxy(id, proxy, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_setServerProcessProxy(String id, 
                                                        ProcessPrx proxy, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_VoidCallback __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setServerProcessProxy(id, proxy, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       LocatorRegistryPrxHelper.__setServerProcessProxy_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_setServerProcessProxy(String id, 
                                                        ProcessPrx proxy, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setServerProcessProxy_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__setServerProcessProxy_name, __cb);
        try
        {
            __result.prepare(__setServerProcessProxy_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            ProcessPrxHelper.__write(__os, proxy);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_setServerProcessProxy(Ice.AsyncResult __iresult)
        throws ServerNotFoundException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __setServerProcessProxy_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(ServerNotFoundException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __setServerProcessProxy_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Ice.LocatorRegistryPrx __proxy = (Ice.LocatorRegistryPrx)__result.getProxy();
        try
        {
            __proxy.end_setServerProcessProxy(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LocatorRegistryPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), LocatorRegistryPrx.class, LocatorRegistryPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LocatorRegistryPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), LocatorRegistryPrx.class, LocatorRegistryPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LocatorRegistryPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), LocatorRegistryPrx.class, LocatorRegistryPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LocatorRegistryPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), LocatorRegistryPrx.class, LocatorRegistryPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static LocatorRegistryPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, LocatorRegistryPrx.class, LocatorRegistryPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static LocatorRegistryPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, LocatorRegistryPrx.class, LocatorRegistryPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::LocatorRegistry",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, LocatorRegistryPrx v)
    {
        __os.writeProxy(v);
    }

    public static LocatorRegistryPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LocatorRegistryPrxHelper result = new LocatorRegistryPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
