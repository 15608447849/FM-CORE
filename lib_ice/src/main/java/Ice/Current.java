// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Current.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Ice;

/**
 * Information about the current method invocation for servers. Each
 * operation on the server has a <tt>Current</tt> as its implicit final
 * parameter. <tt>Current</tt> is mostly used for Ice services. Most
 * applications ignore this parameter.
 *
 **/
public class Current implements java.lang.Cloneable
{
    /**
     * The object adapter.
     *
     **/
    public ObjectAdapter adapter;

    /**
     * Information about the connection over which the current method
     * invocation was received. If the invocation is direct due to
     * collocation optimization, this value is set to null.
     *
     **/
    public Connection con;

    /**
     * The Ice object identity.
     *
     **/
    public Identity id;

    /**
     * The facet.
     *
     **/
    public String facet;

    /**
     * The operation name.
     *
     **/
    public String operation;

    /**
     * The mode of the operation.
     *
     **/
    public OperationMode mode;

    /**
     * The request context, as received from the client.
     *
     **/
    public java.util.Map<java.lang.String, java.lang.String> ctx;

    /**
     * The request id unless oneway (0) or collocated (-1).
     *
     **/
    public int requestId;

    /**
     * The encoding version used to encode the input and output parameters.
     *
     **/
    public EncodingVersion encoding;

    public Current()
    {
        id = new Identity();
        facet = "";
        operation = "";
        mode = OperationMode.Normal;
        encoding = new EncodingVersion();
    }

    public Current(ObjectAdapter adapter, Connection con, Identity id, String facet, String operation, OperationMode mode, java.util.Map<java.lang.String, java.lang.String> ctx, int requestId, EncodingVersion encoding)
    {
        this.adapter = adapter;
        this.con = con;
        this.id = id;
        this.facet = facet;
        this.operation = operation;
        this.mode = mode;
        this.ctx = ctx;
        this.requestId = requestId;
        this.encoding = encoding;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Current _r = null;
        if(rhs instanceof Current)
        {
            _r = (Current)rhs;
        }

        if(_r != null)
        {
            if(adapter != _r.adapter)
            {
                if(adapter == null || _r.adapter == null || !adapter.equals(_r.adapter))
                {
                    return false;
                }
            }
            if(con != _r.con)
            {
                if(con == null || _r.con == null || !con.equals(_r.con))
                {
                    return false;
                }
            }
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(facet != _r.facet)
            {
                if(facet == null || _r.facet == null || !facet.equals(_r.facet))
                {
                    return false;
                }
            }
            if(operation != _r.operation)
            {
                if(operation == null || _r.operation == null || !operation.equals(_r.operation))
                {
                    return false;
                }
            }
            if(mode != _r.mode)
            {
                if(mode == null || _r.mode == null || !mode.equals(_r.mode))
                {
                    return false;
                }
            }
            if(ctx != _r.ctx)
            {
                if(ctx == null || _r.ctx == null || !ctx.equals(_r.ctx))
                {
                    return false;
                }
            }
            if(requestId != _r.requestId)
            {
                return false;
            }
            if(encoding != _r.encoding)
            {
                if(encoding == null || _r.encoding == null || !encoding.equals(_r.encoding))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Ice::Current");
        __h = IceInternal.HashUtil.hashAdd(__h, adapter);
        __h = IceInternal.HashUtil.hashAdd(__h, con);
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, facet);
        __h = IceInternal.HashUtil.hashAdd(__h, operation);
        __h = IceInternal.HashUtil.hashAdd(__h, mode);
        __h = IceInternal.HashUtil.hashAdd(__h, ctx);
        __h = IceInternal.HashUtil.hashAdd(__h, requestId);
        __h = IceInternal.HashUtil.hashAdd(__h, encoding);
        return __h;
    }

    public Current
    clone()
    {
        Current c = null;
        try
        {
            c = (Current)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public static final long serialVersionUID = -6178374122886477055L;
}
