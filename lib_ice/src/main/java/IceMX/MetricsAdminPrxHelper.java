// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceMX;

/**
 * Provides type-specific helper functions.
 **/
public final class MetricsAdminPrxHelper extends Ice.ObjectPrxHelperBase implements MetricsAdminPrx
{
    private static final String __disableMetricsView_name = "disableMetricsView";

    public void disableMetricsView(String name)
        throws UnknownMetricsView
    {
        disableMetricsView(name, null, false);
    }

    public void disableMetricsView(String name, java.util.Map<String, String> __ctx)
        throws UnknownMetricsView
    {
        disableMetricsView(name, __ctx, true);
    }

    private void disableMetricsView(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMetricsView
    {
        __checkTwowayOnly(__disableMetricsView_name);
        end_disableMetricsView(begin_disableMetricsView(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_disableMetricsView(String name)
    {
        return begin_disableMetricsView(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, java.util.Map<String, String> __ctx)
    {
        return begin_disableMetricsView(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, Ice.Callback __cb)
    {
        return begin_disableMetricsView(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disableMetricsView(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, Callback_MetricsAdmin_disableMetricsView __cb)
    {
        return begin_disableMetricsView(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, java.util.Map<String, String> __ctx, Callback_MetricsAdmin_disableMetricsView __cb)
    {
        return begin_disableMetricsView(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_disableMetricsView(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_disableMetricsView(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_disableMetricsView(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_disableMetricsView(String name, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_disableMetricsView(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_disableMetricsView(String name, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_disableMetricsView(name, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    MetricsAdminPrxHelper.__disableMetricsView_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_disableMetricsView(String name, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__disableMetricsView_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__disableMetricsView_name, __cb);
        try
        {
            __result.prepare(__disableMetricsView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.SlicedFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_disableMetricsView(Ice.AsyncResult __iresult)
        throws UnknownMetricsView
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __disableMetricsView_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(UnknownMetricsView __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __disableMetricsView_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        IceMX.MetricsAdminPrx __proxy = (IceMX.MetricsAdminPrx)__result.getProxy();
        try
        {
            __proxy.end_disableMetricsView(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __enableMetricsView_name = "enableMetricsView";

    public void enableMetricsView(String name)
        throws UnknownMetricsView
    {
        enableMetricsView(name, null, false);
    }

    public void enableMetricsView(String name, java.util.Map<String, String> __ctx)
        throws UnknownMetricsView
    {
        enableMetricsView(name, __ctx, true);
    }

    private void enableMetricsView(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMetricsView
    {
        __checkTwowayOnly(__enableMetricsView_name);
        end_enableMetricsView(begin_enableMetricsView(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_enableMetricsView(String name)
    {
        return begin_enableMetricsView(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, java.util.Map<String, String> __ctx)
    {
        return begin_enableMetricsView(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, Ice.Callback __cb)
    {
        return begin_enableMetricsView(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enableMetricsView(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, Callback_MetricsAdmin_enableMetricsView __cb)
    {
        return begin_enableMetricsView(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, java.util.Map<String, String> __ctx, Callback_MetricsAdmin_enableMetricsView __cb)
    {
        return begin_enableMetricsView(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, 
                                                   IceInternal.Functional_VoidCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_enableMetricsView(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, 
                                                   IceInternal.Functional_VoidCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_enableMetricsView(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_VoidCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_enableMetricsView(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_enableMetricsView(String name, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_VoidCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_enableMetricsView(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_enableMetricsView(String name, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_enableMetricsView(name, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   MetricsAdminPrxHelper.__enableMetricsView_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_enableMetricsView(String name, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enableMetricsView_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__enableMetricsView_name, __cb);
        try
        {
            __result.prepare(__enableMetricsView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.SlicedFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_enableMetricsView(Ice.AsyncResult __iresult)
        throws UnknownMetricsView
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __enableMetricsView_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(UnknownMetricsView __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __enableMetricsView_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        IceMX.MetricsAdminPrx __proxy = (IceMX.MetricsAdminPrx)__result.getProxy();
        try
        {
            __proxy.end_enableMetricsView(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __getMapMetricsFailures_name = "getMapMetricsFailures";

    public MetricsFailures[] getMapMetricsFailures(String view, String map)
        throws UnknownMetricsView
    {
        return getMapMetricsFailures(view, map, null, false);
    }

    public MetricsFailures[] getMapMetricsFailures(String view, String map, java.util.Map<String, String> __ctx)
        throws UnknownMetricsView
    {
        return getMapMetricsFailures(view, map, __ctx, true);
    }

    private MetricsFailures[] getMapMetricsFailures(String view, String map, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMetricsView
    {
        __checkTwowayOnly(__getMapMetricsFailures_name);
        return end_getMapMetricsFailures(begin_getMapMetricsFailures(view, map, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, String map)
    {
        return begin_getMapMetricsFailures(view, map, null, false, false, null);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, String map, java.util.Map<String, String> __ctx)
    {
        return begin_getMapMetricsFailures(view, map, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, String map, Ice.Callback __cb)
    {
        return begin_getMapMetricsFailures(view, map, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, String map, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMapMetricsFailures(view, map, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, String map, Callback_MetricsAdmin_getMapMetricsFailures __cb)
    {
        return begin_getMapMetricsFailures(view, map, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, String map, java.util.Map<String, String> __ctx, Callback_MetricsAdmin_getMapMetricsFailures __cb)
    {
        return begin_getMapMetricsFailures(view, map, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, 
                                                       String map, 
                                                       IceInternal.Functional_GenericCallback1<MetricsFailures[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMapMetricsFailures(view, map, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, 
                                                       String map, 
                                                       IceInternal.Functional_GenericCallback1<MetricsFailures[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMapMetricsFailures(view, map, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, 
                                                       String map, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<MetricsFailures[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMapMetricsFailures(view, map, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMapMetricsFailures(String view, 
                                                       String map, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<MetricsFailures[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMapMetricsFailures(view, map, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getMapMetricsFailures(String view, 
                                                        String map, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_GenericCallback1<MetricsFailures[]> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMapMetricsFailures(view, map, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackArg1UE<IceMX.MetricsFailures[]>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       MetricsAdminPrxHelper.__getMapMetricsFailures_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_getMapMetricsFailures(String view, 
                                                        String map, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMapMetricsFailures_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getMapMetricsFailures_name, __cb);
        try
        {
            __result.prepare(__getMapMetricsFailures_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.SlicedFormat);
            __os.writeString(view);
            __os.writeString(map);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public MetricsFailures[] end_getMapMetricsFailures(Ice.AsyncResult __iresult)
        throws UnknownMetricsView
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getMapMetricsFailures_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(UnknownMetricsView __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            MetricsFailures[] __ret;
            __ret = MetricsFailuresSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getMapMetricsFailures_completed(Ice.TwowayCallbackArg1UE<MetricsFailures[]> __cb, Ice.AsyncResult __result)
    {
        IceMX.MetricsAdminPrx __proxy = (IceMX.MetricsAdminPrx)__result.getProxy();
        MetricsFailures[] __ret = null;
        try
        {
            __ret = __proxy.end_getMapMetricsFailures(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getMetricsFailures_name = "getMetricsFailures";

    public MetricsFailures getMetricsFailures(String view, String map, String id)
        throws UnknownMetricsView
    {
        return getMetricsFailures(view, map, id, null, false);
    }

    public MetricsFailures getMetricsFailures(String view, String map, String id, java.util.Map<String, String> __ctx)
        throws UnknownMetricsView
    {
        return getMetricsFailures(view, map, id, __ctx, true);
    }

    private MetricsFailures getMetricsFailures(String view, String map, String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMetricsView
    {
        __checkTwowayOnly(__getMetricsFailures_name);
        return end_getMetricsFailures(begin_getMetricsFailures(view, map, id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, String map, String id)
    {
        return begin_getMetricsFailures(view, map, id, null, false, false, null);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, String map, String id, java.util.Map<String, String> __ctx)
    {
        return begin_getMetricsFailures(view, map, id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, String map, String id, Ice.Callback __cb)
    {
        return begin_getMetricsFailures(view, map, id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, String map, String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMetricsFailures(view, map, id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, String map, String id, Callback_MetricsAdmin_getMetricsFailures __cb)
    {
        return begin_getMetricsFailures(view, map, id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, String map, String id, java.util.Map<String, String> __ctx, Callback_MetricsAdmin_getMetricsFailures __cb)
    {
        return begin_getMetricsFailures(view, map, id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, 
                                                    String map, 
                                                    String id, 
                                                    IceInternal.Functional_GenericCallback1<MetricsFailures> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMetricsFailures(view, map, id, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, 
                                                    String map, 
                                                    String id, 
                                                    IceInternal.Functional_GenericCallback1<MetricsFailures> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMetricsFailures(view, map, id, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, 
                                                    String map, 
                                                    String id, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<MetricsFailures> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMetricsFailures(view, map, id, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMetricsFailures(String view, 
                                                    String map, 
                                                    String id, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<MetricsFailures> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMetricsFailures(view, map, id, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getMetricsFailures(String view, 
                                                     String map, 
                                                     String id, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<MetricsFailures> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMetricsFailures(view, map, id, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1UE<IceMX.MetricsFailures>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    MetricsAdminPrxHelper.__getMetricsFailures_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_getMetricsFailures(String view, 
                                                     String map, 
                                                     String id, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMetricsFailures_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getMetricsFailures_name, __cb);
        try
        {
            __result.prepare(__getMetricsFailures_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.SlicedFormat);
            __os.writeString(view);
            __os.writeString(map);
            __os.writeString(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public MetricsFailures end_getMetricsFailures(Ice.AsyncResult __iresult)
        throws UnknownMetricsView
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getMetricsFailures_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(UnknownMetricsView __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            MetricsFailures __ret = null;
            __ret = MetricsFailures.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getMetricsFailures_completed(Ice.TwowayCallbackArg1UE<MetricsFailures> __cb, Ice.AsyncResult __result)
    {
        IceMX.MetricsAdminPrx __proxy = (IceMX.MetricsAdminPrx)__result.getProxy();
        MetricsFailures __ret = null;
        try
        {
            __ret = __proxy.end_getMetricsFailures(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getMetricsView_name = "getMetricsView";

    public java.util.Map<java.lang.String, Metrics[]> getMetricsView(String view, Ice.LongHolder timestamp)
        throws UnknownMetricsView
    {
        return getMetricsView(view, timestamp, null, false);
    }

    public java.util.Map<java.lang.String, Metrics[]> getMetricsView(String view, Ice.LongHolder timestamp, java.util.Map<String, String> __ctx)
        throws UnknownMetricsView
    {
        return getMetricsView(view, timestamp, __ctx, true);
    }

    private java.util.Map<java.lang.String, Metrics[]> getMetricsView(String view, Ice.LongHolder timestamp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMetricsView
    {
        __checkTwowayOnly(__getMetricsView_name);
        return end_getMetricsView(timestamp, begin_getMetricsView(view, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getMetricsView(String view)
    {
        return begin_getMetricsView(view, null, false, false, null);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, java.util.Map<String, String> __ctx)
    {
        return begin_getMetricsView(view, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, Ice.Callback __cb)
    {
        return begin_getMetricsView(view, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMetricsView(view, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, Callback_MetricsAdmin_getMetricsView __cb)
    {
        return begin_getMetricsView(view, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, java.util.Map<String, String> __ctx, Callback_MetricsAdmin_getMetricsView __cb)
    {
        return begin_getMetricsView(view, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, 
                                                FunctionalCallback_MetricsAdmin_getMetricsView_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMetricsView(view, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, 
                                                FunctionalCallback_MetricsAdmin_getMetricsView_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMetricsView(view, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, 
                                                java.util.Map<String, String> __ctx, 
                                                FunctionalCallback_MetricsAdmin_getMetricsView_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMetricsView(view, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMetricsView(String view, 
                                                java.util.Map<String, String> __ctx, 
                                                FunctionalCallback_MetricsAdmin_getMetricsView_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMetricsView(view, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getMetricsView(String view, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 FunctionalCallback_MetricsAdmin_getMetricsView_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallbackUE implements IceMX._Callback_MetricsAdmin_getMetricsView
        {
            public CB(FunctionalCallback_MetricsAdmin_getMetricsView_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.UserException> userExceptionCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, userExceptionCb, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(java.util.Map<java.lang.String, Metrics[]> __ret, long timestamp)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, timestamp);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                MetricsAdminPrxHelper.__getMetricsView_completed(this, __result);
            }

            private final FunctionalCallback_MetricsAdmin_getMetricsView_Response __responseCb;
        }
        return begin_getMetricsView(view, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __userExceptionCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getMetricsView(String view, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMetricsView_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getMetricsView_name, __cb);
        try
        {
            __result.prepare(__getMetricsView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.SlicedFormat);
            __os.writeString(view);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public java.util.Map<java.lang.String, Metrics[]> end_getMetricsView(Ice.LongHolder timestamp, Ice.AsyncResult __iresult)
        throws UnknownMetricsView
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getMetricsView_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(UnknownMetricsView __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            timestamp.value = __is.readLong();
            java.util.Map<java.lang.String, Metrics[]> __ret;
            __ret = MetricsViewHelper.read(__is);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getMetricsView_completed(IceMX._Callback_MetricsAdmin_getMetricsView __cb, Ice.AsyncResult __result)
    {
        IceMX.MetricsAdminPrx __proxy = (IceMX.MetricsAdminPrx)__result.getProxy();
        java.util.Map<java.lang.String, Metrics[]> __ret = null;
        Ice.LongHolder timestamp = new Ice.LongHolder();
        try
        {
            __ret = __proxy.end_getMetricsView(timestamp, __result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, timestamp.value);
    }

    private static final String __getMetricsViewNames_name = "getMetricsViewNames";

    public String[] getMetricsViewNames(Ice.StringSeqHolder disabledViews)
    {
        return getMetricsViewNames(disabledViews, null, false);
    }

    public String[] getMetricsViewNames(Ice.StringSeqHolder disabledViews, java.util.Map<String, String> __ctx)
    {
        return getMetricsViewNames(disabledViews, __ctx, true);
    }

    private String[] getMetricsViewNames(Ice.StringSeqHolder disabledViews, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getMetricsViewNames_name);
        return end_getMetricsViewNames(disabledViews, begin_getMetricsViewNames(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getMetricsViewNames()
    {
        return begin_getMetricsViewNames(null, false, false, null);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(java.util.Map<String, String> __ctx)
    {
        return begin_getMetricsViewNames(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(Ice.Callback __cb)
    {
        return begin_getMetricsViewNames(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMetricsViewNames(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(Callback_MetricsAdmin_getMetricsViewNames __cb)
    {
        return begin_getMetricsViewNames(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(java.util.Map<String, String> __ctx, Callback_MetricsAdmin_getMetricsViewNames __cb)
    {
        return begin_getMetricsViewNames(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(FunctionalCallback_MetricsAdmin_getMetricsViewNames_Response __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMetricsViewNames(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(FunctionalCallback_MetricsAdmin_getMetricsViewNames_Response __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMetricsViewNames(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(java.util.Map<String, String> __ctx, 
                                                     FunctionalCallback_MetricsAdmin_getMetricsViewNames_Response __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMetricsViewNames(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMetricsViewNames(java.util.Map<String, String> __ctx, 
                                                     FunctionalCallback_MetricsAdmin_getMetricsViewNames_Response __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMetricsViewNames(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getMetricsViewNames(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      FunctionalCallback_MetricsAdmin_getMetricsViewNames_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements IceMX._Callback_MetricsAdmin_getMetricsViewNames
        {
            public CB(FunctionalCallback_MetricsAdmin_getMetricsViewNames_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(String[] __ret, String[] disabledViews)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, disabledViews);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                MetricsAdminPrxHelper.__getMetricsViewNames_completed(this, __result);
            }

            private final FunctionalCallback_MetricsAdmin_getMetricsViewNames_Response __responseCb;
        }
        return begin_getMetricsViewNames(__ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getMetricsViewNames(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMetricsViewNames_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getMetricsViewNames_name, __cb);
        try
        {
            __result.prepare(__getMetricsViewNames_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_getMetricsViewNames(Ice.StringSeqHolder disabledViews, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getMetricsViewNames_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            disabledViews.value = Ice.StringSeqHelper.read(__is);
            String[] __ret;
            __ret = Ice.StringSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getMetricsViewNames_completed(IceMX._Callback_MetricsAdmin_getMetricsViewNames __cb, Ice.AsyncResult __result)
    {
        IceMX.MetricsAdminPrx __proxy = (IceMX.MetricsAdminPrx)__result.getProxy();
        String[] __ret = null;
        Ice.StringSeqHolder disabledViews = new Ice.StringSeqHolder();
        try
        {
            __ret = __proxy.end_getMetricsViewNames(disabledViews, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, disabledViews.value);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MetricsAdminPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), MetricsAdminPrx.class, MetricsAdminPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MetricsAdminPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), MetricsAdminPrx.class, MetricsAdminPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MetricsAdminPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), MetricsAdminPrx.class, MetricsAdminPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MetricsAdminPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), MetricsAdminPrx.class, MetricsAdminPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static MetricsAdminPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, MetricsAdminPrx.class, MetricsAdminPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static MetricsAdminPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, MetricsAdminPrx.class, MetricsAdminPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::IceMX::MetricsAdmin"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, MetricsAdminPrx v)
    {
        __os.writeProxy(v);
    }

    public static MetricsAdminPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MetricsAdminPrxHelper result = new MetricsAdminPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
