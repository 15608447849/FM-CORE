// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceMX;

/**
 * A structure to keep track of failures associated with a given
 * metrics.
 *
 **/
public class MetricsFailures implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * The identifier of the metrics object associated to the
     * failures.
     *
     **/
    public String id;

    /**
     * The failures observed for this metrics.
     *
     **/
    public java.util.Map<java.lang.String, java.lang.Integer> failures;

    public MetricsFailures()
    {
        id = "";
    }

    public MetricsFailures(String id, java.util.Map<java.lang.String, java.lang.Integer> failures)
    {
        this.id = id;
        this.failures = failures;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MetricsFailures _r = null;
        if(rhs instanceof MetricsFailures)
        {
            _r = (MetricsFailures)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(failures != _r.failures)
            {
                if(failures == null || _r.failures == null || !failures.equals(_r.failures))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::IceMX::MetricsFailures");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, failures);
        return __h;
    }

    public MetricsFailures
    clone()
    {
        MetricsFailures c = null;
        try
        {
            c = (MetricsFailures)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(id);
        StringIntDictHelper.write(__os, failures);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readString();
        failures = StringIntDictHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, MetricsFailures __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public MetricsFailures
    __read(IceInternal.BasicStream __is, MetricsFailures __v)
    {
        if(__v == null)
        {
             __v = new MetricsFailures();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final MetricsFailures __nullMarshalValue = new MetricsFailures();

    public static final long serialVersionUID = 6458117982298063723L;
}
