// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceMX;

/**
 * Provides information on child invocations. A child invocation is
 * either remote (sent over an Ice connection) or collocated. An
 * invocation can have multiple child invocation if it is
 * retried. Child invocation metrics are embedded within {@link
 * InvocationMetrics}.
 *
 **/
public class ChildInvocationMetrics extends Metrics
{
    public ChildInvocationMetrics()
    {
        super();
        size = 0L;
        replySize = 0L;
    }

    public ChildInvocationMetrics(String id, long total, int current, long totalLifetime, int failures, long size, long replySize)
    {
        super(id, total, current, totalLifetime, failures);
        this.size = size;
        this.replySize = replySize;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new ChildInvocationMetrics();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::IceMX::ChildInvocationMetrics",
        "::IceMX::Metrics"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.writeLong(size);
        __os.writeLong(replySize);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        size = __is.readLong();
        replySize = __is.readLong();
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    /**
     * The size of the invocation. This corresponds to the size of the
     * marshalled input parameters.
     *
     **/
    public long size;

    /**
     * The size of the invocation reply. This corresponds to the size
     * of the marshalled output and return parameters.
     *
     **/
    public long replySize;

    public ChildInvocationMetrics
    clone()
    {
        return (ChildInvocationMetrics)super.clone();
    }

    public static final long serialVersionUID = 2273731628554051433L;
}
