//    private static class TimestampTypeAdapter implements JsonSerializer<Timestamp>, JsonDeserializer<Timestamp> {
//        private final static DateFormat format= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//        @Override
//        public java.sql.Timestamp deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
//            if (!(jsonElement instanceof JsonPrimitive)) {
//                throw new JsonParseException("The timestamp should be a string value");
//            }
//            try {
//                java.util.Date date = format.parse(jsonElement.getAsString());
//                return new java.sql.Timestamp(date.getTime());
//            } catch (ParseException e) {
//                throw new JsonParseException(e);
//            }
//        }
//        @Override
//        public JsonElement serialize(java.sql.Timestamp timestamp, Type type, JsonSerializationContext jsonSerializationContext) {
//            return new JsonPrimitive(format.format(new Date(timestamp.getTime())));
//        }
//    }




//    private static class TimeTypeAdapter implements JsonSerializer<java.sql.Time>, JsonDeserializer<java.sql.Time> {
//        private final DateFormat format = new SimpleDateFormat("HH:mm:ss");
//
//
//        @Override
//        public java.sql.Time deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
//            if (!(jsonElement instanceof JsonPrimitive)) {
//                throw new JsonParseException("The time should be a string value");
//            }
//            try {
//                Date date = format.parse(jsonElement.getAsString());
//                return new java.sql.Time(date.getTime());
//            } catch (ParseException e) {
//                throw new JsonParseException(e);
//            }
//        }
//
//        @Override
//        public JsonElement serialize(java.sql.Time timestamp, Type type, JsonSerializationContext jsonSerializationContext) {
//            return new JsonPrimitive(format.format(new Date(timestamp.getTime())));
//        }
//    }





//    private static class DateTypeAdapter implements JsonSerializer<java.sql.Date>, JsonDeserializer<java.sql.Date> {
//        private final DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
//
//        @Override
//        public java.sql.Date deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
//            if (!(jsonElement instanceof JsonPrimitive)) {
//                throw new JsonParseException("The date should be a string value");
//            }
//            try {
//                Date date = format.parse(jsonElement.getAsString());
//                return new java.sql.Date(date.getTime());
//            } catch (ParseException e) {
//                throw new JsonParseException(e);
//            }
//        }
//
//        @Override
//        public JsonElement serialize(java.sql.Date timestamp, Type type, JsonSerializationContext jsonSerializationContext) {
//            return new JsonPrimitive(format.format(new Date(timestamp.getTime())));
//        }
//    }




//    private static class BigIntegerTypeAdapter implements JsonSerializer<BigInteger>, JsonDeserializer<BigInteger> {
//
//        @Override
//        public BigInteger deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
//            if (!(jsonElement instanceof JsonPrimitive)) {
//                throw new JsonParseException("The BigInteger should be a string value");
//            }
//            try {
//                return new BigInteger(jsonElement.getAsString());
//            } catch (NumberFormatException e) {
////                jsonElement.getAsJsonObject().entrySet().iterator().next().getKey();
//                throw new JsonParseException(jsonElement.getAsJsonObject().entrySet().iterator().next().getKey());
//            }
//        }
//
//        @Override
//        public JsonElement serialize(BigInteger var, Type type, JsonSerializationContext jsonSerializationContext) {
//            return new JsonPrimitive(String.valueOf(var));
//        }
//    }




//    private static class BigDecimalTypeAdapter implements JsonSerializer<BigDecimal>, JsonDeserializer<BigDecimal> {
//
//        @Override
//        public BigDecimal deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
//            if (!(jsonElement instanceof JsonPrimitive)) {
//                throw new JsonParseException("The BigDecimal should be a string value");
//            }
//
//
//            try {
//
//                System.out.println("jsonElement.getAsString() = " + jsonElement.getAsString());
//                return new BigDecimal(jsonElement.getAsString());
//            } catch (NumberFormatException e) {
////                throw new JsonParseException(e);
////                System.out.println(jsonElement.getAsJsonObject().entrySet().iterator().next().getKey());
//                return new BigDecimal(0);
////                return new JsonPrimitive(new BigDecimal(jsonElement.getAsString()));
//
//            }
//
//        }
//
//        @Override
//        public JsonElement serialize(BigDecimal var, Type type, JsonSerializationContext jsonSerializationContext) {
//            String temp = var.toString();
//            int index = temp.indexOf(".");
//            if (index>0){
//
//                String sub = temp.substring(index+1);
//                if (sub.length()>=16){
//                    // 16位小数 转字符串
//                    return new JsonPrimitive(var.toString());
//                }
//            }
//            return new JsonPrimitive(Double.parseDouble(temp));
//        }
//    }
















//            Gson _builder =  new GsonBuilder()
//                    .registerTypeAdapter(type,
//                            new TypeAdapter<Object>(){
//                        @Override
//                        public void write(JsonWriter out, Object value) throws IOException {
//
//                        }
//
//                        @Override
//                        public Object read(JsonReader in) throws IOException {
//
//                            JsonToken token = in.peek();
//
//                            switch (token) {
//                                case STRING:
//                                    return in.nextString();
//                                case NUMBER:
//                                    String s = in.nextString();
//                                    if (s.contains(".")) {
//                                        return Double.valueOf(s);
//                                    } else {
//                                        try {
//                                            return Integer.valueOf(s);
//                                        } catch (Exception e) {
//                                            return Long.valueOf(s);
//                                        }
//                                    }
//                                case BOOLEAN:
//                                    return in.nextBoolean();
//                                case NULL:
//                                    in.nextNull();
//                                    return null;
//
//                                case BEGIN_ARRAY:
//                                    List<Object> list = new ArrayList<>();
//                                    in.beginArray();
//                                    while (in.hasNext()) {
//                                        list.add(read(in));
//                                    }
//                                    in.endArray();
//                                    return list;
//
//                                case BEGIN_OBJECT:
//                                    HashMap<T,D> map = new HashMap<>();
//                                    in.beginObject();
//                                    while (in.hasNext()) {
//                                        map.put((T)in.nextName(), (D)read(in));
//                                    }
//                                    in.endObject();
//                                    return map;
//                                default:
//                                    throw new IllegalStateException();
//                            }
//                        }
//                    } ).create();




















public class ApiRequestHelper {

    // 判断类型返回默认值
    private static Object getTypeDefaultValue(Class<?> classType){

        if (Boolean.class.isAssignableFrom(classType)) return false;
        else if (Integer.class.isAssignableFrom(classType)) return 0;
        else if (Long.class.isAssignableFrom(classType)) return 0L;
        else if (Float.class.isAssignableFrom(classType)) return 0.0F;
        else if (Double.class.isAssignableFrom(classType)) return 0.0D;
        // 引用类型等
        return null;
    }

    private static Object getTypeValue(Object value, Class<?> classType,Type genericType) {

        if (String.class.isAssignableFrom(classType)) {
            if (value instanceof String)  return  value;
            else  return GoogleGsonUtil.javaBeanToJson(value);
        }
        else if (Boolean.class.isAssignableFrom(classType)) return Boolean.valueOf(String.valueOf(value));
        else if (Integer.class.isAssignableFrom(classType)) return Integer.valueOf(String.valueOf(value));
        else if (Long.class.isAssignableFrom(classType)) return Long.valueOf(String.valueOf(value));
        else if (Float.class.isAssignableFrom(classType)) return Float.valueOf(String.valueOf(value));
        else if (Double.class.isAssignableFrom(classType)) return Double.valueOf(String.valueOf(value));
        else if (BigDecimal.class.isAssignableFrom(classType)) return new BigDecimal(String.valueOf(value));
        else if (BigInteger.class.isAssignableFrom(classType)) return new BigInteger(String.valueOf(value));

        else return GoogleGsonUtil.jsonToJavaBean(GoogleGsonUtil.javaBeanToJson(value),genericType);
    }

    /* 处理级联map key对象 */
    private static Object loopConvertMapParams(List<String> keys, Map<String, Object> map) {

        String key = null;
        Object value = null;

        for (String k : keys) {

            if (value!=null){
                String json = GoogleGsonUtil.javaBeanToJson(value);
                map = GoogleGsonUtil.string2Map(json);
                if (map == null) throw new IllegalArgumentException("请求参数 校验失败 ,不是MAP JSON格式文本,KEY = "+ key +" JSON = "+ json );
            }

            key = k;
            value = map.get(key);

            if (value == null) throw new IllegalArgumentException("请求参数 校验失败,JSON缺少KEY: "+ key);
        }

        return value;
    }

    static Object convertFuncRequest(IceSessionContext context,Parameter parameter, Class<?> classType, Type genericType, String[] arrayParam, String jsonParam) {

        // 获取形参注解
        Annotation[] annotations = parameter.getAnnotations();
        if (annotations.length != 1){
            return getTypeDefaultValue(classType);
        }
        Annotation annotation = annotations[0];

        if (IReqArray.class.isAssignableFrom(annotation.annotationType())){

            // 数组
            if (String[].class.isAssignableFrom(classType)){
                int value = ((IReqArray) annotation).value();
                if (value>0 && (arrayParam==null || arrayParam.length != value) ) throw new IllegalArgumentException("请求参数 数组长度("+(arrayParam==null?-1:arrayParam.length)+")不正确,固定长度: "+ value );
                // 数组参数
                return arrayParam;
            }

        }

        if (IReqJson.class.isAssignableFrom(annotation.annotationType())){
            // JSON
            if (jsonParam == null) throw new IllegalArgumentException("请求参数JSON文本为空");
            boolean value =((IReqJson) annotation).value();
            if (!value && String.class.isAssignableFrom(classType)){
                return jsonParam;
            }
            if (value){
                // 自动转换实体对象
               return GoogleGsonUtil.jsonToJavaBean(jsonParam,genericType);
            }
        }

        if (IReqKey.class.isAssignableFrom(annotation.annotationType())){
            // JSON
            if (jsonParam == null) throw new IllegalArgumentException("请求参数JSON文本为空");
            String key = ((IReqKey) annotation).value();

            if (context.stringObjectMap == null){
                context.stringObjectMap = GoogleGsonUtil.string2Map(jsonParam);
                if ( context.stringObjectMap == null ) throw new IllegalArgumentException("请求参数 校验失败,不是JSON MAP格式文本");
            }

            String[] keyArr = key.split("\\.");
            Object value = loopConvertMapParams(Arrays.asList(keyArr),context.stringObjectMap);
            return getTypeValue(value,classType,genericType);
        }

        return getTypeDefaultValue(classType);
    }


}